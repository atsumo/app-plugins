/** * This is WebLayer Save Plugin like Fireworks weblayer *  * 設定方法(Mac illustrator CS6) * 1. /Applications/Adobe illustrator CS6/Presets の配下に WebLayerSave.jsxを配置 * 2. PhotoShopを起動(すでに開いてる場合は再起動してください) * 3. ファイル>スクリプト>LayerSave を実行 *  * 使い方 * 1.レイヤーに「WebLayer」というグループを作る * 2.WebLayer配下に切り出したい大きさの長方形(正方形)を生成 * 3.レイヤーの名前は保存したいファイル名Pathにする(ex sample/sample001/#/test.png) * 4.「#」を入れている部分はPhotoShopファイル自体のファイル名(.psdは除く)に変換されます。 * 5.WebLayerSaveを実行 *  * @fileName WebLayerSave.jsx * @author atsumo */#target illustrator(function(){    //preferences.rulerUnits = Units.PIXELS;    const WEB_LAYER_NAME = 'WebLayer';        var fileName = activeDocument.name;    var cardId = fileName.slice(0, fileName.length - 4);        function WebLayerSave() {    }    WebLayerSave.prototype = {        init: function() {            var self = this;            self.width = activeDocument.width;            self.height = activeDocument.height;                        self.selectLayer();        },        selectLayer: function() {        	var self = this;        	var layers = activeDocument.layers;        	var isSelectLayer = confirm(activeDocument.activeLayer.name + 'を書き出しますか？');                      if (!isSelectLayer) return;        	self.weblayer = activeDocument.activeLayer;        	        	if (!self.weblayer) {        		alert('Layerグループ名がありません');        		return;        	}        	try {        		self.confirmWindow();        	} catch (e) {        		app.beep();            alert('保存に失敗しました', e);            return;        	}        },        confirmWindow: function() {            var self = this;            var layers = self.weblayer.pathItems;            var message = 'これらの{0}つのファイルを書き出していいですか？\n';            //alert(_.keys(layers));            self.masks = [];            self.targets = [];                        var layer;            for (var i = 0, l = layers.length; i < l; i++) {                layer = layers[i];                var fullName = layer.name;//layer.name.replace('#', cardId);                //message += fullName + '\n';//' [x: ' + layer.bounds[0] + ', y: ' + layer.bounds[1] + ', x: ' + layer.bounds[2] + ', y: ' + layer.bounds[3]  +']\n';                                var bounds = layer.visibleBounds;                self.masks.push({                    bounds: layer.visibleBounds,                    name: fullName,                    format: "png"//names[1]                });            }            for (i = 0; i < activeDocument.layers.length; i++) {            	layer = activeDocument.layers[i];            	//var name = layer.pageItems[0] || '';            	if (layer.visible && self.weblayer !== layer) {            		self.targets.push(layer);            	}            }                    message = message.replace('{0}', self.targets.length);                    var isSave = confirm (message);            if (isSave) {                self.weblayer.visible = false;                self.save();                self.weblayer.visible = true;                alert ('保存が完了しました!');            } else {                alert('保存をやめました');            }                        return self;        },        save: function() {            var self = this;            //これ変えたほうがいいと思う            var path = prompt('保存先のディレクトリをフルパスで入力してください。', activeDocument.path);            if (!path || path.length === 0) return;                        var masks = self.masks;            var artboards = activeDocument.artboards;            var artboard = artboards[artboards.getActiveArtboardIndex()];            // アートボードの領域を覚えておく (あとで元に戻す)            var prevRect = artboard.artboardRect;            var mask;                        var target;            hideLayer(self.targets);            for (var n = 0; n < self.targets.length; n++) {            	//対象だけvisible ture              target = self.targets[n];              //alert(target);              target.visible = true;            	for (var i = 0, l = masks.length; i < l; i++) {                mask = masks[i];                toggleVisible(target.groupItems, false);                var item = target.groupItems[mask.name];                toggleVisible(item, true);                self.saveImage(activeDocument, mask.bounds, path + '/' + target.name + '/' +mask.name, mask.format);                toggleVisible(target.groupItems, true);            	}            }            showLayer(self.targets);                        // アートボードの領域を元に戻す            artboard.artboardRect = prevRect;        },        saveImage: function(doc, bounds, fileName, format) {            var self = this;            var opt;            switch( format ){                case 'png':                    //opt = new PNGSaveOptions();                    opt = new ExportOptionsPNG24();                    opt.interlaced = false;                    opt.artBoardClipping = true;                    opt.ext = '.png';                    break;                default :                    opt = new JPEGSaveOptions();                    opt.embedColorProfile = true;                    opt.formatOptions = FormatOptions.STANDARDBASELINE;                    opt.matte = MatteType.BACKGROUND;                    opt.quality = 12;                    opt.ext = '.jpg';                    break;            }                    var filePaths = fileName.split('/');            var folderName = fileName.slice(0, fileName.length - filePaths[filePaths.length - 1].length);            var folder = new Folder(folderName);            if (!folder.exists) {                folder.create();            }            var fileObj = new File(fileName);            var artboards = doc.artboards;            var artboard = artboards[artboards.getActiveArtboardIndex()];            // アートボードの領域を覚えておく (あとで元に戻す)            var prevRect = artboard.artboardRect;            // アートボードをエクスポートしたい領域に変更する            artboard.artboardRect = bounds;            // エクスポート！            doc.exportFile(fileObj, ExportType.PNG24, opt);                        // アートボードの領域を元に戻す            artboard.artboardRect = prevRect;          }     }     function hideLayer(layers) {     	var layer;     	for (var i = 0; i < layers.length; i++) {     		layer = layers[i];     		layer.visible = false;     		//layer.hidden = true;     	}     }     function showLayer(layers) {     	var layer;     	for (var i = 0; i < layers.length; i++) {     		layer = layers[i]     		layer.visible = true;     		//layer.hidden = false;     	}     }    	function toggleVisible(obj, flag){			  if(obj.pathItems){			    for(var i = 0; i < obj.pathItems.length; i++){			      obj.pathItems[i].hidden = !flag;			    }			  }else{			    obj.hidden = !flag;			  }			  if(obj.compoundPathItems != null){			    for(var j = 0; j < obj.compoundPathItems.length; j++){			      obj.compoundPathItems[j].hidden = !flag;			    }  			  }			  if(obj.groupItems != null){			    for(var k = 0; k < obj.groupItems.length; k++){			      //obj.groupItems[k].hidden = !flag;			      toggleVisible(obj.groupItems[k], flag);			    }			  }			}     //alert(documents);    var plugin = new WebLayerSave();    plugin.init();    })();
/** * this is checkbox sample * @athor atsumo */#target photoshop//===========================================================// UTIL METHODS//===========================================================function rect(x, y, w, h) {    return [x, y, x+w, y+h];}//===========================================================// MAIN//===========================================================//単位をPIXELpreferences.rulerUnits = Units.PIXELS;//new Window('window type', 'title Name', rect(Array));var win = new Window('dialog', 'checkbox', rect(0, 0, 300, 200));//10個のcheckboxを表示するvar checkboxs = [];var h = 0;var label = win.add('statictext', rect(20, 10, 300 - 40, 25), '書き出したいグループを選択');h = 35;//グループすべてを取得var gloups = createlayerList();for (var i = 0; i < gloups.length; i++) {    checkboxs.push({        checkBox: win.add('checkbox', rect(30, h + 25*i, 300 - 60, 25), gloups[i].name),        layer: gloups[i]    }); }h += i*25+10;//buttonvar _okBtn = win.add('button', rect(10, h, 300 - 20, 30), 'OK', {name:'ok'});h += 30;_okBtn.onClick = function () {    showConfirm ();    win.close();};win.bounds = rect(0, 0, 300, h+10);win.center();win.show();function createlayerList() {    var layers = [];    //folderとなるレイヤーをチェック    for (var i = 0; i < activeDocument.layerSets.length; i++) {        var parent = activeDocument.layerSets[i];        var layerSets = parent.layerSets;        alert(parent.name);        for (var n = 0; n < layerSets.length; n++) {            var layer = layerSets[n];            try {                var bounds = layer.artLayers['#'].bounds;                layers.push({                    layer: layer,                    name: parent.name + '/' + layer.name,                    bounds: bounds                });            } catch(e) {                            }                    }    }    return layers;}function showConfirm() {    var message = 'これらのファイルを保存しますか？\n';    var layerSets = [];    var layer;    var bounds;    for (var i = 0; i < checkboxs.length; i++) {        if (!checkboxs[i].checkBox.value) continue;                layer = checkboxs[i].layer;        bounds = layer.bounds;        message += layer.name + ' [' + bounds.toString() + ']\n';        layerSets.push(layer);    }    var isSave = confirm (message);        if (isSave) {        doSave(layerSets);    } else {        cancel();    }}function doSave(targetLayerSets) {    alert('doSave '+  targetLayerSets.length + ' を書き出します');}function cancel() {    alert('cancel');}